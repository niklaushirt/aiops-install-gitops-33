apiVersion: batch/v1
kind: Job
metadata:
  name: 191-ai-patch-ingress
  annotations:
    argocd.argoproj.io/sync-wave: "191"
  namespace: {{.Values.spec.aiManager.namespace}}
spec:
  template:
    spec:
      containers:
        - name: config
          image: quay.io/openshift/origin-cli:latest
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: "64Mi"
              cpu: "150m"
            limits:
              memory: "256Mi"
              cpu: "200m"
          command:
            - /bin/sh
            - -c
            - |
              set -x

              echo "---------------------------------------------------------------------------------"
              echo " ðŸ’Š Patching Network Policy" 
              echo "---------------------------------------------------------------------------------"

              cat <<EOF | oc apply -f -
              apiVersion: networking.k8s.io/v1
              kind: NetworkPolicy
              metadata:
                name: allow-all-egress-and-ingress
                annotations:
                  argocd.argoproj.io/sync-wave: "3"
                namespace: {{.Values.spec.aiManager.namespace}}
              spec:
                egress:
                - {}
                ingress:
                - {}
                podSelector: {}
                policyTypes:
                - Egress
                - Ingress
              EOF


              echo "---------------------------------------------------------------------------------"
              echo " ðŸ’Š Patching AutomationUIConfig"
              echo "---------------------------------------------------------------------------------"

              oc project {{.Values.spec.aiManager.namespace}}
              NAMESPACE={{.Values.spec.aiManager.namespace}}
              AUTO_UI_INSTANCE=$(oc get AutomationUIConfig -n $NAMESPACE --no-headers -o custom-columns=":metadata.name")
              IAF_STORAGE=$(oc get AutomationUIConfig -n $NAMESPACE -o jsonpath='{ .items[*].spec.zenService.storageClass }')
              ZEN_STORAGE=$(oc get AutomationUIConfig -n $NAMESPACE -o jsonpath='{ .items[*].spec.zenService.zenCoreMetaDbStorageClass }')
              oc get -n $NAMESPACE AutomationUIConfig $AUTO_UI_INSTANCE --ignore-not-found -o yaml > /tmp/AutomationUIConfig-backup-$(date +%Y%m%d-%H%M).yaml
              
              if [[ ! $IAF_STORAGE == "" ]];
              then
              oc delete -n $NAMESPACE AutomationUIConfig $AUTO_UI_INSTANCE

              cat <<EOF | oc apply -f -
              apiVersion: core.automation.ibm.com/v1beta1
              kind: AutomationUIConfig
              metadata:
                name: $AUTO_UI_INSTANCE
                namespace: $NAMESPACE
              spec:
                description: AutomationUIConfig for cp4waiops
                license:
                  accept: true
                version: v1.3
                zen: true
                zenService:
                  iamIntegration: true
                  storageClass: $IAF_STORAGE
                  zenCoreMetaDbStorageClass: $ZEN_STORAGE
                tls:
                  caSecret:
                    key: ca.crt
                    secretName: external-tls-secret
                  certificateSecret:
                    secretName: external-tls-secret
              EOF
              else
                echo "Couldn't get IAF_STORAGE"
              fi



              echo "---------------------------------------------------------------------------------"
              echo " ðŸ’Š Patching NGINX Certs"
              echo "---------------------------------------------------------------------------------"

              ingress_pod=$(oc get secrets -n openshift-ingress | grep tls | grep -v router-metrics-certs-default | awk '{print $1}')
              oc get secret -n openshift-ingress ${ingress_pod} -o jsonpath='{.data.tls\.crt}'  | base64 -d > /tmp/cert.crt
              oc get secret -n openshift-ingress ${ingress_pod} -o jsonpath='{.data.tls\.key}' | base64 -d > /tmp/cert.key
              oc get secret -n {{.Values.spec.aiManager.namespace}} iaf-system-automationui-aui-zen-ca -o jsonpath='{.data.ca\.crt}' | base64 -d > /tmp/ca.crt

              oc get secret -n {{.Values.spec.aiManager.namespace}} external-tls-secret --ignore-not-found -o yaml > /tmp/external-tls-secret-backup-$(date +%Y%m%d-%H%M).yaml
              oc delete secret -n {{.Values.spec.aiManager.namespace}} --ignore-not-found external-tls-secret
              oc create secret generic -n {{.Values.spec.aiManager.namespace}} external-tls-secret --from-file=ca.crt=/tmp/ca.crt --from-file=cert.crt=/tmp/cert.crt --from-file=cert.key=/tmp/cert.key --dry-run=client -o yaml | oc apply -f -
              REPLICAS=2
              oc scale Deployment/ibm-nginx --replicas=0
              sleep 3
              oc scale Deployment/ibm-nginx --replicas=${REPLICAS}

              NGINX_READY=$(oc get pod -n {{.Values.spec.aiManager.namespace}} | grep "ibm-nginx" | grep "0/1" || true) 
              while  ([[  $NGINX_READY =~ "0/1" ]]); do 
                  NGINX_READY=$(oc get pod -n {{.Values.spec.aiManager.namespace}} | grep "ibm-nginx" | grep "0/1" || true) 
                  echo "      â­• Nginx not ready. Waiting for 10 seconds...." && sleep 10; 
              done


              echo "---------------------------------------------------------------------------------"
              echo " ðŸ§» Restart Slack Pod"
              echo "---------------------------------------------------------------------------------"

              oc delete pod $(oc get po -n {{.Values.spec.aiManager.namespace}}|grep slack|awk '{print$1}') -n {{.Values.spec.aiManager.namespace}} --grace-period 0 --force



      restartPolicy: Never
      serviceAccountName: openshift-argocd-admin-ai
  backoffLimit: 4
