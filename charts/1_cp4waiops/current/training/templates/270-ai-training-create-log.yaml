apiVersion: batch/v1
kind: Job
metadata:
  name: 270-ai-training-create-log
  annotations:
    argocd.argoproj.io/sync-wave: "270"
  namespace: {{.Values.spec.aiManager.namespace}}
spec:
  template:
    spec:
      containers:
        - name: config
          image: niklaushirt/cp4waiops-awx:0.1.3
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: "64Mi"
              cpu: "150m"
            limits:
              memory: "256Mi"
              cpu: "200m"
          command:
            - /bin/sh
            - -c
            - |
              set -x

              echo "---------------------------------------------------------------------------------"
              echo " üì• Initialize"
              echo "---------------------------------------------------------------------------------"

              export WAIOPS_NAMESPACE=$(oc get po -A|grep aimanager-operator |awk '{print$1}')

              echo "       üõ†Ô∏è  Create Route"
              oc create route passthrough ai-platform-api -n $WAIOPS_NAMESPACE  --service=aimanager-aio-ai-platform-api-server --port=4000 --insecure-policy=Redirect --wildcard-policy=None
              export ROUTE=$(oc get route -n $WAIOPS_NAMESPACE ai-platform-api  -o jsonpath={.spec.host})
              echo "        Route: $ROUTE"
              echo ""
    
              echo "       üõ†Ô∏è  Getting ZEN Token"
            
              ZEN_API_HOST=$(oc get route -n $WAIOPS_NAMESPACE cpd -o jsonpath='{.spec.host}')
              ZEN_LOGIN_URL="https://${ZEN_API_HOST}/v1/preauth/signin"
              LOGIN_USER=admin
              LOGIN_PASSWORD="$(oc get secret admin-user-details -n $WAIOPS_NAMESPACE -o jsonpath='{ .data.initial_admin_password }' | base64 --decode)"

              ZEN_LOGIN_RESPONSE=$(
              curl -k \
              -H 'Content-Type: application/json' \
              -XPOST \
              "${ZEN_LOGIN_URL}" \
              -d '{
                    "username": "'"${LOGIN_USER}"'",
                    "password": "'"${LOGIN_PASSWORD}"'"
              }' 2> /dev/null
              )

              ZEN_LOGIN_MESSAGE=$(echo "${ZEN_LOGIN_RESPONSE}" | jq -r .message)

              if [ "${ZEN_LOGIN_MESSAGE}" != "success" ]; then
              echo "Login failed: ${ZEN_LOGIN_MESSAGE}" 1>&2

              exit 2
              fi

              ZEN_TOKEN=$(echo "${ZEN_LOGIN_RESPONSE}" | jq -r .token)
              echo "${ZEN_TOKEN}"

              echo "Sucessfully logged in" 1>&2

              echo ""





              echo "---------------------------------------------------------------------------------"
              echo " üì• Create Data Set: Log Anomaly Detection"
              echo "---------------------------------------------------------------------------------"

              QUERY=$(curl https://raw.githubusercontent.com/niklaushirt/aiops-install-awx-33/main/tools/02_training/training-definitions/create-dataset-LAD.graphql)
              JSON_QUERY=$(echo "${QUERY}" | jq -sR '{"operationName": null, "variables": {}, "query": .}')
              export result=$(curl -XPOST "https://$ROUTE/graphql" -k \
              -H 'Accept-Encoding: gzip, deflate, br'  \
              -H 'Content-Type: application/json'  \
              -H 'Accept: application/json'  \
              -H 'Connection: keep-alive'  \
              -H 'DNT: 1'  \
              -H "Origin: $ROUTE"  \
              -H "authorization: Bearer $ZEN_TOKEN"  \
              --data-binary "${JSON_QUERY}"  \
              --compressed)
              export DATA_SET_ID=$(echo $result| jq -r ".data.createDataSet.dataSetId")
              echo "      üîé Result: "
              echo "       "$result|jq ".data" | sed 's/^/          /'
              echo "     "	
              echo "     "	


              echo "---------------------------------------------------------------------------------"
              echo " üì• Create Analysis Definiton: Log Anomaly Detection"
              echo "---------------------------------------------------------------------------------"

              echo "***************************************************************************************************************************************************"
              echo "   üõ†Ô∏è  Create Analysis Definiton: Log Anomaly Detection"
              echo "     "	
              echo "      üì• Launch Query for file: create-analysis-LAD.graphql"	
              echo "     "
              QUERY_TMPL=$(curl https://raw.githubusercontent.com/niklaushirt/aiops-install-awx-33/main/tools/02_training/training-definitions/create-analysis-LAD.graphql)
              QUERY=$(echo $QUERY_TMPL | sed "s/<DATA_SET_ID>/$DATA_SET_ID/g")
              JSON_QUERY=$(echo "${QUERY}" | jq -sR '{"operationName": null, "variables": {}, "query": .}')
              export result=$(curl -XPOST "https://$ROUTE/graphql" -k \
              -H 'Accept-Encoding: gzip, deflate, br'  \
              -H 'Content-Type: application/json'  \
              -H 'Accept: application/json'  \
              -H 'Connection: keep-alive'  \
              -H 'DNT: 1'  \
              -H "Origin: $ROUTE"  \
              -H "authorization: Bearer $ZEN_TOKEN"  \
              --data-binary "${JSON_QUERY}"  \
              --compressed)
              echo "      üîé Result: "
              echo "       "$result|jq ".data" | sed 's/^/          /'
              echo "     "	
              echo "     "	



              echo "---------------------------------------------------------------------------------"
              echo " üì• Turn off RSA - Log Anomaly Statistical Baseline"
              echo "---------------------------------------------------------------------------------"

              echo "---------------------------------------------------------------------------------"
              QUERY_NAME=deactivate-analysis-RSA.graphql
              echo "---------------------------------------------------------------------------------"


              QUERY=$(curl https://raw.githubusercontent.com/niklaushirt/aiops-install-awx-33/main/tools/02_training/training-definitions/$QUERY_NAME)
              JSON_QUERY=$(echo "${QUERY}" | jq -sR '{"operationName": null, "variables": {}, "query": .}')

              export result=$(curl -XPOST "https://$ROUTE/graphql" -k \
              -H 'Accept-Encoding: gzip, deflate, br'  \
              -H 'Content-Type: application/json'  \
              -H 'Accept: application/json'  \
              -H 'Connection: keep-alive'  \
              -H 'DNT: 1'  \
              -H "Origin: https://$ROUTE"  \
              -H "authorization: Bearer $ZEN_TOKEN"  \
              --data-binary "${JSON_QUERY}"  \
              --compressed)

              echo "RESULT: $result"

              echo "---------------------------------------------------------------------------------"
              echo " ‚úÖ DONE"
              echo "---------------------------------------------------------------------------------"

          
      serviceAccountName: openshift-argocd-admin-ai
      restartPolicy: Never
  backoffLimit: 4
